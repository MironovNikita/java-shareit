package ru.practicum.shareit;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ShareItApp {

    public static void main(String[] args) {
        SpringApplication.run(ShareItApp.class, args);
    }

    /*
    Семён, привет!
    Спасибо за комментарии и материал!
    По @SneakyThrows я почитал, насколько я понял, эта аннотация не позволит обработать брошенное исключение, т.е.
    проверяемые исключения будут обрабатываться как непроверяемые. Удалил её везде, поставил throws.
    По остальным ответам понял, спасибо за разъяснения!

    По поводу разделения тестов с множественными assertThat. Пробежался по коду, в целом у меня проверяются в таких
    случаях списки или его элементы. В таком случае я бы оставил один тест, т.к. тут +/- будет ясно, в каком
    направлении "копать", если вдруг что-то выполнится не так, как ожидалось, т.к. логика вертится вокруг конкретного
    списка.
    А вот в RequestRepositoryTest я разделил один тест на два, т.к. там сначала проверяются элементы списка, а потом
    уже даты создания => список и его элементы и свойства объектов этого списка - сущности разные, поэтому имеет смысл
    разделения) Во всяком случае я так понял суть)

    По проверке параметров пагинации. Я переделал на @PositiveOrZero аннотацию @Min, но вот с @Max так не получилось,
    нужно @Positive ограничивать по верху. Кстати, я заметил, что у этих аннотаций один и тот же пакет
    (javax.validation.constraints). Т.е. по идее эти аннотации все штатные)) И как раз над классами я добавлял
    @Validated, чтобы они работали)) Да и сколько в интернете не видел примеров, везде через @Min/@Max проверяют.
    Хотя твой подход мне нравится, так лаконичнее смотрится.

    Ох уж этот Enum...
    Крови он мне попил немало) По итогу добавил отлов исключения, стало всё шикарно) Теперь у меня красивые и
    лаконичные методы в Service. Спасибо Косте Сидорову, он мне очень помог с этим вопросом)

    Именованные параметры прикольная вещь) Хотя бы понятно, что именно запрашивается. Хотя тоже зависит от того, как
    и что назовут)
    Вроде ничего не забыл, всё поправил) Буду ждать ответа!
     */
}